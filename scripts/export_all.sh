#!/bin/bash

# Script para executar todos os exports do SonarQube
# Autor: Sistema de Exporta√ß√£o SonarQube
# Data: $(date +%Y-%m-%d)

set -e  # Parar em caso de erro

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fun√ß√£o para imprimir mensagens coloridas
print_message() {
    local color=$1
    local message=$2
    echo -e "${color}${message}${NC}"
}

# Fun√ß√£o para imprimir cabe√ßalho
print_header() {
    echo ""
    echo "=================================="
    echo "$1"
    echo "=================================="
}

# Fun√ß√£o para verificar se um arquivo existe
check_script() {
    local script_path=$1
    if [ ! -f "$script_path" ]; then
        print_message $RED "‚ùå Erro: Script $script_path n√£o encontrado!"
        exit 1
    fi
}

# Fun√ß√£o para executar script Python
run_python_script() {
    local script_name=$1
    local script_path="scripts/$script_name"
    
    print_header "Executando $script_name"
    
    check_script "$script_path"
    
    print_message $BLUE "üöÄ Iniciando $script_name..."
    
    if python "$script_path"; then
        print_message $GREEN "‚úÖ $script_name executado com sucesso!"
    else
        print_message $RED "‚ùå Erro ao executar $script_name!"
        return 1
    fi
}

# Fun√ß√£o para criar diret√≥rio de exports se n√£o existir
create_exports_dir() {
    if [ ! -d "exports" ]; then
        mkdir -p exports
        print_message $YELLOW "üìÅ Diret√≥rio exports/ criado"
    fi
}

# Fun√ß√£o para verificar conectividade com SonarQube
check_sonarqube_connectivity() {
    print_header "Verificando Conectividade"
    
    local sonar_url=${SONAR_URL:-"http://sonarqube:9000"}
    local max_retries=30
    local retry_count=0
    
    print_message $BLUE "üîÑ Verificando conectividade com SonarQube..."
    print_message $BLUE "üì° URL: $sonar_url"
    
    while [ $retry_count -lt $max_retries ]; do
        if curl -s -f -u "${SONAR_USERNAME:-admin}:${SONAR_PASSWORD:-admin}" \
           "$sonar_url/api/system/status" > /dev/null 2>&1; then
            print_message $GREEN "‚úÖ SonarQube est√° dispon√≠vel!"
            return 0
        fi
        
        retry_count=$((retry_count + 1))
        print_message $YELLOW "‚è≥ Tentativa $retry_count/$max_retries - aguardando..."
        sleep 2
    done
    
    print_message $RED "‚ùå SonarQube n√£o est√° dispon√≠vel ap√≥s $max_retries tentativas"
    return 1
}

# Fun√ß√£o para mostrar informa√ß√µes do ambiente
show_environment_info() {
    print_header "Informa√ß√µes do Ambiente"
    
    print_message $BLUE "üìã Configura√ß√µes:"
    echo "   ‚Ä¢ URL SonarQube: ${SONAR_URL:-http://sonarqube:9000}"
    echo "   ‚Ä¢ Usu√°rio: ${SONAR_USERNAME:-admin}"
    echo "   ‚Ä¢ Projeto: ${PROJECT_KEY:-teste}"              #Trocar para o PROJECT_KEY configurado na Sonar
    echo "   ‚Ä¢ Data/Hora: $(date '+%Y-%m-%d %H:%M:%S')"
    echo "   ‚Ä¢ Diret√≥rio de trabalho: $(pwd)"
    echo "   ‚Ä¢ Vers√£o Python: $(python --version 2>&1)"
}

# Fun√ß√£o para criar relat√≥rio consolidado
create_consolidated_report() {
    print_header "Criando Relat√≥rio Consolidado"
    
    local timestamp=$(date +%Y%m%d_%H%M%S)
    local report_file="exports/consolidated_report_${PROJECT_KEY:-teste}_${timestamp}.md"           #Trocar para o PROJECT_KEY configurado na Sonar
    
    print_message $BLUE "üìÑ Criando relat√≥rio consolidado..."
    
    cat > "$report_file" << EOF
# Relat√≥rio Consolidado SonarQube

**Projeto:** ${PROJECT_KEY:-teste}                                      #Trocar para o PROJECT_KEY configurado na Sonar
**Data de Exporta√ß√£o:** $(date '+%Y-%m-%d %H:%M:%S')
**URL SonarQube:** ${SONAR_URL:-http://sonarqube:9000}

## Arquivos Exportados

### M√©tricas
$(ls -la exports/metrics_* 2>/dev/null | tail -n +2 | awk '{print "- " $9 " (" $5 " bytes) - " $6 " " $7 " " $8}' || echo "- Nenhum arquivo de m√©tricas encontrado")

### Issues
$(ls -la exports/issues_* 2>/dev/null | tail -n +2 | awk '{print "- " $9 " (" $5 " bytes) - " $6 " " $7 " " $8}' || echo "- Nenhum arquivo de issues encontrado")

### Quality Gate
$(ls -la exports/quality_gate_* 2>/dev/null | tail -n +2 | awk '{print "- " $9 " (" $5 " bytes) - " $6 " " $7 " " $8}' || echo "- Nenhum arquivo de quality gate encontrado")

## Resumo da Exporta√ß√£o

- **Total de arquivos:** $(ls -1 exports/ 2>/dev/null | wc -l)
- **Tamanho total:** $(du -sh exports/ 2>/dev/null | cut -f1 || echo "0")
- **Status:** Conclu√≠do com sucesso
- **Hora de conclus√£o:** $(date '+%Y-%m-%d %H:%M:%S')

---
*Relat√≥rio gerado automaticamente pelo sistema de exporta√ß√£o SonarQube*
EOF

    print_message $GREEN "‚úÖ Relat√≥rio consolidado criado: $report_file"
}

# Fun√ß√£o para limpar arquivos antigos (opcional)
cleanup_old_files() {
    local days_old=${1:-7}  # Padr√£o: 7 dias
    
    print_header "Limpeza de Arquivos Antigos"
    
    print_message $BLUE "üßπ Procurando arquivos com mais de $days_old dias..."
    
    local old_files=$(find exports/ -name "*.json" -o -name "*.xlsx" -o -name "*.csv" -o -name "*.md" | \
                     xargs ls -la 2>/dev/null | \
                     awk -v days=$days_old 'BEGIN{cmd="date -d \""days" days ago\" +%Y%m%d"; cmd | getline cutoff_date} 
                          {gsub(/-/, "", $6); if($6 < cutoff_date) print $9}' 2>/dev/null || true)
    
    if [ -n "$old_files" ]; then
        print_message $YELLOW "üìã Arquivos antigos encontrados:"
        echo "$old_files"
        
        # Comentar a linha abaixo se quiser ativar a limpeza autom√°tica
        # echo "$old_files" | xargs rm -f
        # print_message $GREEN "‚úÖ Arquivos antigos removidos"
        
        print_message $BLUE "üí° Para remover automaticamente, descomente a linha de limpeza no script"
    else
        print_message $GREEN "‚úÖ Nenhum arquivo antigo encontrado"
    fi
}

# Fun√ß√£o principal
main() {
    print_header "üöÄ EXPORTA√á√ÉO COMPLETA SONARQUBE"
    
    # Mostrar informa√ß√µes do ambiente
    show_environment_info
    
    # Criar diret√≥rio de exports
    create_exports_dir
    
    # Verificar conectividade
    if ! check_sonarqube_connectivity; then
        print_message $RED "‚ùå N√£o foi poss√≠vel conectar ao SonarQube. Verifique se os containers est√£o rodando."
        exit 1
    fi
    
    # Executar scripts de exporta√ß√£o
    local failed_scripts=0
    
    print_header "üìä EXPORTANDO M√âTRICAS"
    if ! run_python_script "export_metrics.py"; then
        failed_scripts=$((failed_scripts + 1))
        print_message $RED "‚ùå Falha na exporta√ß√£o de m√©tricas"
    fi
    
    print_header "üêõ EXPORTANDO ISSUES"
    if ! run_python_script "export_issues.py"; then
        failed_scripts=$((failed_scripts + 1))
        print_message $RED "‚ùå Falha na exporta√ß√£o de issues"
    fi
    
    print_header "üö™ EXPORTANDO QUALITY GATE"
    if ! run_python_script "export_quality_gate.py"; then
        failed_scripts=$((failed_scripts + 1))
        print_message $RED "‚ùå Falha na exporta√ß√£o de quality gate"
    fi
    
    # Criar relat√≥rio consolidado
    create_consolidated_report
    
    # Limpeza de arquivos antigos (opcional)
    cleanup_old_files 7
    
    # Resumo final
    print_header "üìã RESUMO FINAL"
    
    local total_files=$(ls -1 exports/ 2>/dev/null | wc -l)
    local total_size=$(du -sh exports/ 2>/dev/null | cut -f1 || echo "0")
    
    print_message $BLUE "üìä Estat√≠sticas da exporta√ß√£o:"
    echo "   ‚Ä¢ Total de arquivos exportados: $total_files"
    echo "   ‚Ä¢ Tamanho total: $total_size"
    echo "   ‚Ä¢ Scripts executados: $((3 - failed_scripts))/3"
    echo "   ‚Ä¢ Falhas: $failed_scripts"
    echo "   ‚Ä¢ Diret√≥rio: exports/"
    
    if [ $failed_scripts -eq 0 ]; then
        print_message $GREEN "üéâ EXPORTA√á√ÉO COMPLETA REALIZADA COM SUCESSO!"
        print_message $GREEN "üìÅ Todos os relat√≥rios est√£o dispon√≠veis em: exports/"
    else
        print_message $YELLOW "‚ö†Ô∏è  EXPORTA√á√ÉO CONCLU√çDA COM $failed_scripts FALHA(S)"
        print_message $YELLOW "üìÅ Relat√≥rios parciais est√£o dispon√≠veis em: exports/"
    fi
    
    # Listar arquivos exportados
    print_message $BLUE "üìÅ Arquivos exportados:"
    ls -la exports/ 2>/dev/null || print_message $RED "‚ùå Nenhum arquivo foi exportado"
    
    print_header "‚úÖ PROCESSAMENTO CONCLU√çDO"
    
    return $failed_scripts
}

# Verificar se o script est√° sendo executado diretamente
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    main "$@"
fi